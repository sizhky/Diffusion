# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_dataset.ipynb.

# %% auto 0
__all__ = ['transform', 'download_faces_dataset', 'CustomDataset']

# %% ../nbs/02_dataset.ipynb 3
import requests
from torch_snippets import *
import torchvision.transforms as transforms

# %% ../nbs/02_dataset.ipynb 4
def _download(url, output_file):
    response = requests.get(url, stream=True)
    if response.status_code == 200:
        with open(output_file, "wb") as file:
            for chunk in response.iter_content(chunk_size=8192):
                if chunk:
                    file.write(chunk)
        Info(f"File '{output_file}' downloaded successfully.")
    else:
        Info(f"Failed to download the file. Status code: {response.status_code}")


def download_faces_dataset(download_directory):
    url = "https://www.dropbox.com/scl/fi/2a99eiciulqbz656mqb81/faces4.zip?rlkey=olc6q1bp4p4mg82728ljg4n21"
    output_file = "faces4.zip"
    with notify_waiting("Downloading faces dataset"):
        _download(url, output_file)
    unzip_file("faces4.zip", download_directory)
    P(output_file).rm(force=True)

# %% ../nbs/02_dataset.ipynb 5
transform = transforms.Compose(
    [
        transforms.ToTensor(),  # from [0,255] to range [0.0,1.0]
        transforms.Normalize((0.5,), (0.5,)),  # range [-1,1]
    ]
)

class CustomDataset(Dataset):
    def __init__(self, sfilename, transform=transform):
        self.sprites = np.load(sfilename)
        Info(f"sprite shape: {self.sprites.shape}")
        self.transform = transform
        self.sprites_shape = self.sprites.shape

    def __len__(self):
        return len(self.sprites)

    def __getitem__(self, ix):
        image = self.transform(self.sprites[ix])
        return {'image': image}

